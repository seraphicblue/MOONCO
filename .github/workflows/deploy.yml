name: Deploy Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/moonco:${{ github.sha }}
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare EC2 environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/app ~/app/certbot/conf ~/app/certbot/www
            if [ ! -f ~/app/.env.prod ]; then
              touch ~/app/.env.prod
            fi

            # Create directories for SSL certificates
            sudo mkdir -p /etc/letsencrypt/live/api.bogiegie.shop
            sudo mkdir -p /etc/letsencrypt/archive/api.bogiegie.shop

      - name: Check and fix volume permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo chown -R root:root ~/app/certbot/conf
            sudo chmod -R 755 ~/app/certbot/conf
            sudo chown -R www-data:www-data ~/app/certbot/www
            sudo chmod -R 755 ~/app/certbot/www
            ls -la ~/app/certbot/conf
            ls -la ~/app/certbot/www

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml,nginx.conf,.env.prod"
          target: "~/app"
          debug: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            sed -i '/IMAGE_TAG/d' .env.prod
            echo "IMAGE_TAG=${{ github.sha }}" >> .env.prod

            # 기존 서비스 중지 및 포트 충돌 방지
            echo "기존 프로세스 정리 중..."
            sudo lsof -ti:80,443 | xargs sudo kill -9 || true
            docker-compose -f docker-compose.prod.yml --env-file .env.prod down --remove-orphans

            echo "서비스 시작 중 (Nginx, Nest App)..."
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d nginx nest_app

            echo "Nginx 상태 확인 중..."
            docker-compose -f docker-compose.prod.yml --env-file .env.prod ps nginx
            docker-compose -f docker-compose.prod.yml --env-file .env.prod logs nginx

            echo "Certbot 실행 중..."
            docker-compose -f docker-compose.prod.yml --env-file .env.prod run --rm certbot

            echo "인증서 발급 중..."
            sleep 30 

            CERT_PATH="/home/ubuntu/app/certbot/conf/live/api.bogiegie.shop/fullchain.pem"
            if [ -f "$CERT_PATH" ]; then
              echo "SSL 인증서가 성공적으로 발급/갱신되었습니다."
              echo "Nginx 재시작 중..."
              docker-compose -f docker-compose.prod.yml --env-file .env.prod restart nginx
            else
              echo "SSL 인증서 발급/갱신에 실패했습니다. 로그를 확인해주세요."
              docker-compose -f docker-compose.prod.yml --env-file .env.prod logs certbot
            fi

            echo "이전 이미지 정리 중..."
            docker image prune -af
